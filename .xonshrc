import os
from prompt_toolkit.keys import Keys

# restart required on prompt
if os.path.exists('/var/run/reboot-required'):
    $[cat /var/run/reboot-required]


## System Variables
$PROMPT = '{BOLD_#FFCB6B}{user}{BOLD_#82AAFF}/{cwd_base} {BOLD_#546E7A}[{gitstatus}{BOLD_#546E7A}] {RESET}{prompt_end} '
# $VI_MODE = True

$SUDO_EDITOR = '/usr/bin/vim'
$EDITOR = '/usr/bin/vim'

$BEEP1 = '/usr/share/sounds/sound-icons/prompt.wav'
$BEEP2 = '/usr/share/sounds/Yaru/stereo/message-new-instant.oga'
$BEEP3 = '/usr/share/sounds/freedesktop/stereo/service-login.oga'

# Load xonsh fzf
$PATH.append('/home/ed/.fzf/bin/')
# Load rust cargo bin
$PATH.append('/home/ed/.cargo/bin/')

xontrib load fzf-widgets
# xonsh fzf bindings
$fzf_history_binding = "c-r"
$fzf_file_binding = "c-t"
$fzf_dir_binding = "c-g"
# xonsh fzf file and dir commands
exclude_dirs = '-not -ipath "*/.git/*" -and -not -path "*/.cache/*"'
exclude_dirs += ' -and -not -path "*/.npm/*" -and -not -path "*/session/*"'
exclude_dirs += ' -and -not -path "*/node_modules/*"'
$fzf_find_command = f'find "$(pwd)" -maxdepth 3 -type f {exclude_dirs}'
$fzf_find_dirs_command = f'find "$(pwd)" "/home/ed/" -maxdepth 3 -type d {exclude_dirs} | sort -u'

# fzf defaults
$FZF_DEFAULT_OPTS = '--bind "-:preview-half-page-down,=:preview-half-page-up,ctrl-d:cancel+first,[:down,]:up"'
$FZF_DEFAULT_OPTS += ' --preview-window "noborder"'
$FZF_DEFAULT_OPTS += ' --color=fg:#80cbc4,bg:-1,hl:#80cbc4'
$FZF_DEFAULT_OPTS += ' --color=fg+:#82aaff,bg+:,hl+:#82aaff'
$FZF_DEFAULT_OPTS += ' --color=info:#c3e88d,prompt:#80cbc4,pointer:#ffcb6b'
$FZF_DEFAULT_OPTS += ' --color=marker:#ffcb6b,spinner:#ff5370,header:#80cbc4'

$LS_COLORS='rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:';

# fff status background color [0-9]
$FFF_COL2=0
# Selection color [0-9] (copied/moved files)
$FFF_COL3=2
# Cursor color [0-9]
$FFF_COL4=6
# Status foreground color [0-9]
$FFF_COL5=2

## Aliases
aliases['ls'] = 'ls -a'
aliases['ll'] = lambda args: $[$LC_COLLATE='C' ls --group-directories-first -lAh --color @(args)]

aliases['fetch'] = 'screenfetch -w -c ",7;2"'
aliases['gfetch'] = 'onefetch'
aliases['fortune'] = 'bash -c "fortune | figlet -f smblock | lolcat"'
aliases['cmatrix'] = 'cmatrix -a'

aliases['speed'] = 'speedtest-cli --simple'
aliases['suspend'] = 'systemctl suspend'
aliases['sensor'] = 'watch -n 1 -t sensors -A'
aliases['t'] = '$[tput reset]; $[clear]'
aliases['e'] = 'exit'

aliases['p'] = 'ssh pi'
aliases['sshfs_pi'] = 'sshfs pi:./fx ~/Documentos/fx/midas/pi_ssh'
aliases['umount_pi'] = 'umount ~/Documentos/fx/midas/pi_ssh'

aliases['serve'] = 'bash -c "nohup npx serve /home/ed/Documentos/fx/midas/midas_data &>/dev/null &"'
aliases['spicetify'] = '/home/ed/spicetify-cli/spicetify'
aliases['flush'] = 'sudo systemd-resolve --flush-caches'

aliases['h'] = 'cd ~'
aliases['vid'] = 'cd ~/VÃ­deos'
aliases['gitdir'] = 'cd ~/Documentos/git'
aliases['usb'] = 'cd ~/media/ed'
aliases['pi-ssh'] = 'cd ~/Documentos/fx/midas/pi_ssh'
aliases['mgit'] = 'cd ~/Documentos/mgit'
aliases['g'] = 'git'
aliases['dots'] = '/usr/bin/git --git-dir=$HOME/.dots/ --work-tree=$HOME'
aliases['d'] = '/usr/bin/git --git-dir=$HOME/.dots/ --work-tree=$HOME'

aliases['up'] = 'sudo apt update && sudo apt upgrade -y && sudo apt autoremove -y'
aliases['nr'] = 'sudo needrestart -q -r a'
aliases['vx'] = 'vim /home/ed/.xonshrc'
aliases['rx'] = 'source /home/ed/.xonshrc'
aliases['vg'] = 'vim /home/ed/.gitconfig'

aliases['devil'] = 'bash -c "nohup devilspie &>/dev/null &"'
aliases['kdevil'] = 'pkill devilspie'

aliases['beep'] = 'paplay $BEEP1'
aliases['bee'] = 'paplay $BEEP2'
aliases['be'] = 'paplay $BEEP3'
aliases['bebop'] = 'paplay $BEEP3; paplay $BEEP2; paplay $BEEP1'

aliases['clip'] = 'xclip -sel clip'
aliases['xbox'] = 'sudo xboxdrv --silent'

aliases['s'] = 'tt -words ox5000 -n 100 -t 300 -nobackspace -noskip -showwpm -w 80 -theme vscode -csv >> ~/.tt/wpm.csv'
aliases['k'] = 'pkill -9 -f "/bin/sh"'

aliases['md'] = lambda args: execx(f'mkdir -p {repr(args[0])} && cd {repr(args[0])}')

aliases['tetris'] = '/snap/bin/tetris-thefenriswolf.tetris -a'
aliases['cols'] = 'watch -t -n1 "tput cols && tput lines"'
aliases['void'] = 'watch -t -n60 echo'
aliases['pmoon'] = 'watch -t -n1800 pyphoon -x -n 19'


## Functions
# fff file explorer
def _fff(args):
    $[fff "$@"]
    fff_flie_path = $(cat ~/.cache/fff/.fff_d).split()
    if len(fff_flie_path) > 1:
        # fff_flie_path = '\\ '.join(fff_flie_path)
        fff_flie_path = '"' + ' '.join(fff_flie_path) + '/"'
        fff_flie_path = str(fff_flie_path)
        # $[cd @(fff_flie_path)]
        # return 'cd ' + fff_flie_path
    else:
        $[cd @(fff_flie_path)]
aliases['f'] = '@(_fff)'

# cd to directory Midnight Commander ended in.
MC_TMP_DIR = '/tmp/mcdir'

def _mc(args):
    if not os.path.exists(MC_TMP_DIR):
        os.mkdir(MC_TMP_DIR)
    if not os.path.isdir(MC_TMP_DIR):
        print("Sorry, I cannot create the temporary directory %s" % MC_TMP_DIR)
    pid = os.getpid()
    mc_filename = os.path.join(MC_TMP_DIR, "%d" % pid)
    $[/usr/bin/mc - P @(mc_filename) @(args)]
    if os.path.exists(mc_filename):
        directory = $(cat @(mc_filename)).strip()
        $[cd @(directory)]
        $[rm @(mc_filename)]
aliases["mc"] = '@(_mc) -s -S otro ~'

# man pages on bash
def _man(args):
    if args:
        man_str = f'man {args[0]}'
        $[bash -c @(man_str)]
aliases['man'] = _man

# cd to fzf folder
def fcd(event):
    fzf_path = $(which fzf)
    env = os.environ
    env['FZF_DEFAULT_COMMAND'] = $fzf_find_dirs_command
    env['FZF_DEFAULT_OPTS'] = $FZF_DEFAULT_OPTS
    env['FZF_DEFAULT_OPTS'] += ' --preview "tree -a -L 1 -t -r -C {}"'
    import subprocess
    choice = subprocess.run([fzf_path, '+m', '--reverse'], stdout=subprocess.PIPE,
                            universal_newlines=True, env=env).stdout.strip()
    event.cli.renderer.erase()
    if choice:
        if ' ' in choice:
            choice = '"' + choice + '"'
        event.current_buffer.reset()
        command = f'cd {choice}'
        event.current_buffer.insert_text(command.strip())
        $[xdotool key Return Return]



## Keyload Function
@events.on_ptk_create
def custom_keybindings(bindings, **kw):
    # fzf dir to cd C-F bind
    @bindings.add(Keys.ControlF)
    def say_hi(event):
        fcd(event)
